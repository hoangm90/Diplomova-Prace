{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Downloads\\\\react_with_w3s\\\\src\\\\formUpdates\\\\UpdateForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport classess from \"./UpdateForm.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction UpdateForm(props) {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [queryId, setQueryId] = useState(\"\");\n  const [item, setItem] = useState(null);\n  const url = \"http://localhost:8000/\" + props.name + \"s\";\n  const itemAttributeName = props.name + \"_name\";\n  const itemAttributeId = props.name + \"_id\";\n  const valueSubmitButton = \"SUBMIT \" + props.name.toUpperCase();\n  useEffect(() => {\n    fetch(url).then(r => r.json()).then(d => setData(d));\n  }, [props.name]);\n\n  const showItem = event => {\n    setQueryId(event.target.value);\n\n    for (let i = 0; i < data.length; i++) {\n      if (data[i][itemAttributeId] == event.target.value) {\n        setItem(data[i]);\n        break;\n      }\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    let urlQuery = \"http://localhost:8000/\" + props.name + \"s?\" + itemAttributeId + \"=\" + queryId;\n    fetch(urlQuery, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(item)\n    });\n    setItem(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [props.name.toUpperCase(), \" UPDATE\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Choose the \", props.name, \" to update: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 55\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: props.name,\n        name: props.name,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          disabled: true,\n          selected: true,\n          value: true,\n          children: \" -- select an option -- \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), data && data.map(elem => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: elem[itemAttributeId],\n            onClick: showItem,\n            children: elem[itemAttributeName]\n          }, elem[itemAttributeId], false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 36\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), item && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Chosen \", props.name, \"'s information:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: item[itemAttributeName],\n          onChange: e => {\n            setItem(prevState => ({ ...prevState,\n              [itemAttributeName]: e.target.value\n            }));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\" ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: item[itemAttributeId],\n          onChange: e => {\n            setItem(prevState => ({ ...prevState,\n              [itemAttributeId]: e.target.value\n            }));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: valueSubmitButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UpdateForm, \"cr2vbofGcaFv5JahOpvUI91Gs3I=\");\n\n_c = UpdateForm;\nexport default UpdateForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateForm\");","map":{"version":3,"sources":["C:/Users/Dell/Downloads/react_with_w3s/src/formUpdates/UpdateForm.js"],"names":["useState","useEffect","classess","UpdateForm","props","data","setData","queryId","setQueryId","item","setItem","url","name","itemAttributeName","itemAttributeId","valueSubmitButton","toUpperCase","fetch","then","r","json","d","showItem","event","target","value","i","length","handleSubmit","preventDefault","urlQuery","method","headers","body","JSON","stringify","map","elem","e","prevState"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport classess from \"./UpdateForm.module.css\"\r\n\r\nfunction UpdateForm(props){\r\n    const [data, setData] = useState(null);\r\n    const [queryId, setQueryId] = useState(\"\")\r\n    const [item, setItem] = useState(null)\r\n    const url = \"http://localhost:8000/\" + props.name + \"s\";\r\n    const itemAttributeName = props.name + \"_name\";\r\n    const itemAttributeId = props.name + \"_id\";\r\n    const valueSubmitButton = \"SUBMIT \" + props.name.toUpperCase();\r\n\r\n    useEffect(() => {\r\n        fetch(url)\r\n        .then(r => r.json())\r\n        .then(d => setData(d));\r\n    }, [props.name]);\r\n\r\n    const showItem = (event) => {\r\n        setQueryId(event.target.value)\r\n        for (let i=0; i<data.length; i++){\r\n            if (data[i][itemAttributeId] == event.target.value){\r\n                setItem(data[i]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let urlQuery = \"http://localhost:8000/\" + props.name + \"s?\" + itemAttributeId + \"=\" + queryId;\r\n        fetch(urlQuery, {\r\n            method: \"PUT\",\r\n            headers: {\"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify(item)\r\n        });\r\n\r\n        setItem(null);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h1>{props.name.toUpperCase()} UPDATE</h1>\r\n            <label>Choose the {props.name} to update: <br />\r\n                <select id={props.name} name={props.name}>\r\n                    <option disabled selected value> -- select an option -- </option>\r\n                    {data &&\r\n                        data.map(elem => {\r\n                            return <option key={elem[itemAttributeId]} value={elem[itemAttributeId]} onClick={showItem}>\r\n                                    {elem[itemAttributeName]}\r\n                                </option>\r\n                        })}\r\n                </select>\r\n            </label>\r\n            {item &&\r\n            <>\r\n                <h1>Chosen {props.name}'s information:</h1>  \r\n                <label> Name:\r\n                    <input type=\"text\" value={item[itemAttributeName]} \r\n                        onChange={(e) => {setItem(prevState => ({\r\n                            ...prevState,\r\n                            [itemAttributeName]: e.target.value\r\n                        }))}}\r\n                    />\r\n                </label>\r\n                <label> ID:\r\n                    <input type=\"text\" value={item[itemAttributeId]} \r\n                        onChange={(e) => {setItem(prevState => ({\r\n                            ...prevState,\r\n                            [itemAttributeId]: e.target.value\r\n                        }))}}\r\n                    />\r\n                </label>\r\n                <input type=\"submit\" value={valueSubmitButton} />\r\n            </>\r\n            }\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default UpdateForm;"]},"metadata":{},"sourceType":"module"}